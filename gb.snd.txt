//音源オブジェクトは、グローバル空間でのみ宣言可能
//これらが持つプロパティーにアクセスすることで、音を変化させます
square_wave  sq;
noise        no;
//どんな名前のプロパティーが存在するかは、libgbsnd/reference.cpp内のget_propertyを参照してください


//引数、ローカル変数はすべて整数型です
//変数宣言はありません
//予約語以外の識別子があると、ローカル変数リストを探索し、
//名前の一致する変数が無ければ、グローバル変数リストを探索し、
//こちらにもなければ、この名前で新たなローカル変数を作成します


//制御文として、C言語のような、if,while,for,switchが使えます
//ただし、C言語と違って、実行部分は必ず複文（中括弧で囲む）でなければなりません
//while(1) a += 1;ではなく、
//while(1){ a += 1;}とする


//*goto文
//goto 識別子;
//label文で設定された行き先へ、無条件ジャンプします


//*break文
//break;
//while,for,switchを抜けます


//*continue文
//continue;
//while,for,switchの先頭へ戻ります


//*label文
//label 識別子;
//goto文の行き先を設定します


//*sleep文
//sleep [式];
//スクリプト実行を中断して、ホストへ制御を戻します
//式を伴った場合、式の評価結果が整数なら、その数値ミリ秒分、実行再開を遅延します


//*print文
//print 式;
//式の評価結果を、標準出力へ書き出します


//*return文
//return [式];
//ルーチンを抜けて、呼び出し元へ復帰します


//*exit文
//exit [式];
//スクリプト実行を終了します


//C言語で言う関数は、ここではルーチンと呼びます
//スクリプトの実行は、mainという名のルーチン（これをメイン・ルーチンと呼び、
//これ以外のルーチンはサブ・ルーチンと呼ぶ）から開始されます
//
//サブ・ルーチン呼び出しは未実装




routine
ret(x,y,z)
{
  return x+y*z;
}


routine
main()
{
//  print x = (1,2,3,4,5,6);
//  print x = 0? 10:20;

  sq.frequency=32;
  sq.volume=8;
  sq.keyon_flag=1;

  b = 0;

    for(;;)
    {
        if(!b)
        {
print ret(1,2,3);
            if(sq.frequency < 800)
            {
              sq.frequency += 10;
            }

          else
            {
              b = 1;
            }
        }

      else
        {
            if(sq.frequency > 20)
            {
              sq.frequency -= 10;
            }

          else
            {
              b = 0;
            }
        }


      sleep 40;
    }
}




