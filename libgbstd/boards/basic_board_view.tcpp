



template<typename  squareT, int  W, int  H>
void
basic_board_view<squareT,W,H>::
chase_object(const spaces::object&  obj, int  speed) noexcept
{
  auto&  base_point = obj.get_base_point();

  auto  dst_point = point(static_cast<int>(base_point.x)-(m_width /2),
                          static_cast<int>(base_point.y)-(m_height/2));

  auto  screen_w = m_board->get_image_width() ;
  auto  screen_h = m_board->get_image_height();

    if(dst_point.x < 0)
    {
      dst_point.x = 0;
    }

  else
    if(dst_point.x > (screen_w-m_width))
    {
      dst_point.x = (screen_w-m_width);
    }


    if(dst_point.y < 0)
    {
      dst_point.y = 0;
    }

  else
    if(dst_point.y > (screen_h-m_height))
    {
      dst_point.y = (screen_h-m_height);
    }


    if(m_offset.x < dst_point.x)
    {
      m_offset.x += speed;

        if(m_offset.x > dst_point.x)
        {
          m_offset.x = dst_point.x;
        }
    }

  else
    if(m_offset.x > dst_point.x)
    {
      m_offset.x -= speed;

        if(m_offset.x < dst_point.x)
        {
          m_offset.x = dst_point.x;
        }
    }


    if(m_offset.y < dst_point.y)
    {
      m_offset.y += speed;

        if(m_offset.y > dst_point.y)
        {
          m_offset.y = dst_point.y;
        }
    }

  else
    if(m_offset.y > dst_point.y)
    {
      m_offset.y -= speed;

        if(m_offset.y < dst_point.y)
        {
          m_offset.y = dst_point.y;
        }
    }
}




template<typename  squareT, int  W, int  H>
void
basic_board_view<squareT,W,H>::
reset(const basic_board<squareT,W,H>&  brd, int  w, int  h) noexcept
{
  m_board = &brd;

  m_width  = w;
  m_height = h;
}


namespace{
int
get_corrected_value(int  value, int  size) noexcept
{
  value %= size;

    if(value < 0)
    {
      value += size;
    }


  return value;
}
}


template<typename  squareT, int  W, int  H>
struct
basic_board_view<squareT,W,H>::
rendering_context
{
  int  board_width ;
  int  board_height;

  int  board_image_width ;
  int  board_image_height;

  int  output_line;

  image_cursor  target;

};


template<typename  squareT, int  W, int  H>
void
basic_board_view<squareT,W,H>::
render_line(const rendering_context&  ctx) const noexcept
{
  int  point_x = (m_offset.x%ctx.board_image_width);

    if(point_x < 0)
    {
      point_x += ctx.board_image_width;
    }


  int  point_y = (m_offset.y+ctx.output_line)%ctx.board_image_height;

    if(point_y < 0)
    {
      point_y += ctx.board_image_height;
    }


  int  board_x           = point_x/squareT::size;
  int        x_remainder = point_x%squareT::size;

  int  board_y  = point_y/squareT::size;
  int  square_y = point_y%squareT::size;

  auto  begin_square = &m_board->get_square(              0,board_y);
  auto    end_square = &m_board->get_square(ctx.board_width,board_y);

  auto  current_square = begin_square+board_x;


  auto  current_dst_pixel = &ctx.target.get_pixel(                                 0,ctx.output_line);
  auto      end_dst_pixel = &ctx.target.get_pixel(ctx.target.get_image().get_width(),ctx.output_line);

  int  x_offset = 0;

    if(x_remainder)
    {
      x_offset = x_remainder;

        if(x_remainder < 0)
        {
          x_offset = x_remainder+squareT::size;
        }
    }


    for(;;)
    {
      auto&  sq = *current_square++;

        if(current_square >= end_square)
        {
          current_square = begin_square;
        }


      auto  rv = static_cast<raster_view>(sq);

      auto  current_src_pixel = &rv.get_pixel(x_offset,square_y);
      auto      end_src_pixel = current_src_pixel+squareT::size;

      x_offset = 0;

        while(current_src_pixel < end_src_pixel)
        {
          *current_dst_pixel++ = *current_src_pixel++;

            if(current_dst_pixel >= end_dst_pixel)
            {
              return;
            }
        }
    }
}


template<typename  squareT, int  W, int  H>
void
basic_board_view<squareT,W,H>::
correct_offset() noexcept
{
  int  board_image_width  = m_board->get_image_width() ;
  int  board_image_height = m_board->get_image_height();

    if(m_offset.x < 0)
    {
      m_offset.x = 0;
    }

  else
    if((m_offset.x+m_width) >= board_image_width)
    {
      m_offset.x = board_image_width-m_width;
    }


    if(m_offset.y < 0)
    {
      m_offset.y = 0;
    }

  else
    if((m_offset.y+m_height) >= board_image_height)
    {
      m_offset.y = board_image_height-m_height;
    }
}


template<typename  squareT, int  W, int  H>
void
basic_board_view<squareT,W,H>::
render(image_cursor  cur, void  (*callback)(basic_board_view<squareT,W,H>&  bv, int  output_line)) noexcept
{
    if(is_visible())
    {
      rendering_context  ctx;

      ctx.board_width  = m_board->get_width() ;
      ctx.board_height = m_board->get_height();

      ctx.board_image_width  = m_board->get_image_width() ;
      ctx.board_image_height = m_board->get_image_height();

      ctx.target = cur;

      ctx.output_line = 0;

        while(ctx.output_line < m_height)
        {
            if(callback)
            {
              callback(*this,ctx.output_line);
            }


          render_line(ctx);

          ++ctx.output_line;
        }
    }
}





