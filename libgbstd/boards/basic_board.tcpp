



template<typename  squareT, int  W, int  H>
bool
basic_board<squareT,W,H>::
test_index(point  i) const noexcept
{
  return((i.x >= 0       ) &&
         (i.y >= 0       ) &&
         (i.x <  m_width ) &&
         (i.y <  m_height));
}


template<typename  squareT, int  W, int  H>
squareT&
basic_board<squareT,W,H>::
get_square_by_object(const spaces::object&  o) noexcept
{
  auto  x = (static_cast<int>(o.get_base_point().x)%m_image_width );
  auto  y = (static_cast<int>(o.get_base_point().y)%m_image_height);

    if(x < 0)
    {
      x += m_image_width;
    }


    if(y < 0)
    {
      y += m_image_height;
    }


  return get_square(x/squareT::size,y/squareT::size);
}


template<typename  squareT, int  W, int  H>
const squareT&
basic_board<squareT,W,H>::
get_square_by_object(const spaces::object&  o) const noexcept
{
  auto  x = (static_cast<int>(o.get_base_point().x)%m_image_width );
  auto  y = (static_cast<int>(o.get_base_point().y)%m_image_height);

    if(x < 0)
    {
      x += m_image_width;
    }


    if(y < 0)
    {
      y += m_image_height;
    }


  return get_square(x/squareT::size,y/squareT::size);
}




